// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/tabbed/pqtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name, email, password
) VALUES (
  $1, $2, $3
)
RETURNING id, email, password, name, avatar, location, title, bio, status, tags, meta, last_login, created_at, updated_at
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Avatar,
		&i.Location,
		&i.Title,
		&i.Bio,
		&i.Status,
		&i.Tags,
		&i.Meta,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :execresult
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteUser, id)
}

const getUser = `-- name: GetUser :one
SELECT id, email, password, name, avatar, location, title, bio, status, tags, meta, last_login, created_at, updated_at FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Avatar,
		&i.Location,
		&i.Title,
		&i.Bio,
		&i.Status,
		&i.Tags,
		&i.Meta,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, name, avatar, location, title, bio, status, tags, meta, last_login, created_at, updated_at FROM users
WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Avatar,
		&i.Location,
		&i.Title,
		&i.Bio,
		&i.Status,
		&i.Tags,
		&i.Meta,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, password, name, avatar, location, title, bio, status, tags, meta, last_login, created_at, updated_at FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Avatar,
		&i.Location,
		&i.Title,
		&i.Bio,
		&i.Status,
		&i.Tags,
		&i.Meta,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, email, password, name, avatar, location, title, bio, status, tags, meta, last_login, created_at, updated_at FROM users
ORDER BY name ASC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Password,
			&i.Name,
			&i.Avatar,
			&i.Location,
			&i.Title,
			&i.Bio,
			&i.Status,
			&i.Tags,
			&i.Meta,
			&i.LastLogin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET name = ?, email = ?, password = ?, avatar = ?, location = ?, title = ?, status = ?, tags = ?, meta = ?, last_login = ?, created_at = ?, updated_at = ? 
WHERE id = ?
RETURNING id, email, password, name, avatar, location, title, bio, status, tags, meta, last_login, created_at, updated_at
`

type UpdateUserParams struct {
	Name      string                `json:"name"`
	Email     string                `json:"email"`
	Password  string                `json:"password"`
	Avatar    sql.NullString        `json:"avatar"`
	Location  sql.NullString        `json:"location"`
	Title     sql.NullString        `json:"title"`
	Status    string                `json:"status"`
	Tags      pqtype.NullRawMessage `json:"tags"`
	Meta      pqtype.NullRawMessage `json:"meta"`
	LastLogin sql.NullTime          `json:"last_login"`
	CreatedAt time.Time             `json:"created_at"`
	UpdatedAt time.Time             `json:"updated_at"`
	ID        uuid.UUID             `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Avatar,
		arg.Location,
		arg.Title,
		arg.Status,
		arg.Tags,
		arg.Meta,
		arg.LastLogin,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Avatar,
		&i.Location,
		&i.Title,
		&i.Bio,
		&i.Status,
		&i.Tags,
		&i.Meta,
		&i.LastLogin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
